esphome:
  name: "stook-monitor"
  friendly_name: stook monitor
  on_boot:
    priority: -10
    then:
    - delay: 1s  # Korte vertraging om ervoor te zorgen dat de offsets klaar zijn
    - lambda: |-
        // Controleer of de huidige waarde van de offsets nog op -255 staat en stel ze in op 0
        if (id(red_offset).state == -255) {
          id(red_offset).publish_state(-13);
        }
        if (id(green_offset).state == -255) {
          id(green_offset).publish_state(-103);
        }
        if (id(blue_offset).state == -255) {
          id(blue_offset).publish_state(0);
        }
    - script.execute: start_led_effect  # Start de LED-effecten na het instellen van de standaardwaarden


esp8266:
  board: d1_mini

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "your_key"

ota:
  - platform: esphome
    password: "your_key"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  ap:
    ssid: "stook monitor Fallback Hotspot"
    password: "your_key"

output:
  - platform: gpio
    pin: GPIO2  # Ingebouwde LED op de ESP8266
    id: led_builtin
    inverted: true  # LED is actief laag

interval:
  - interval: 1s
    then:
      if:
        condition:
          wifi.connected:  # Controleer of WiFi verbonden is
        then:
          - output.turn_off: led_builtin  # LED uit als WiFi verbonden is
        else:
          - output.turn_on: led_builtin  # LED aan
          - delay: 500ms                # Wacht 500 ms
          - output.turn_off: led_builtin  # LED uit
          
captive_portal:
web_server:

sensor:
  - platform: homeassistant
    id: fijnstof_1_pm25
    entity_id: sensor.fijnstof_1_particulate_matter_2_5_m_concentration
  - platform: homeassistant
    id: wind_speed
    entity_id: sensor.buienradar_wind_speed

# Offsets for fine-tuning RGB channels
number:
  - platform: template
    name: "Red Offset"
    id: red_offset
    min_value: -255
    max_value: 255
    step: 1
    optimistic: true
  - platform: template
    name: "Green Offset"
    id: green_offset
    min_value: -255
    max_value: 255
    step: 1
    optimistic: true
  - platform: template
    name: "Blue Offset"
    id: blue_offset
    min_value: -255
    max_value: 255
    step: 1
    optimistic: true


light:
  - platform: neopixelbus
    type: GRB
    pin: D2
    num_leds: 1
    name: "Single WS2812 LED"
    variant: ws2812x
    id: ws2812_led
    default_transition_length: 3s
    effects:
      - addressable_lambda:
          name: "PM2.5 Status Effect"
          update_interval: 100ms  # Snellere updates voor knipperen
          lambda: |-
            int r_offset = id(red_offset).state;
            int g_offset = id(green_offset).state;
            int b_offset = id(blue_offset).state;

            auto apply_offset = [&](int red, int green, int blue) {
              return Color(
                max(0, min(255, red + r_offset)),
                max(0, min(255, green + g_offset)),
                max(0, min(255, blue + b_offset))
              );
            };

            static unsigned long last_blink_time = 0;  // Tijdstip van de laatste wijziging
            static bool led_on = true;  // Huidige status van de LED
            unsigned long current_time = millis();

            if (id(wind_speed).state < 12) {
              // Knipperlogica
              if ((current_time - last_blink_time) >= (led_on ? 500 : 10000)) {  // 0,5 sec aan, 10 sec uit
                led_on = !led_on;  // Wissel de status
                last_blink_time = current_time;  // Reset de timer
              }

              if (led_on) {
                if (id(fijnstof_1_pm25).state > 140) {
                  it[0] = apply_offset(164, 58, 218);
                } else if (id(fijnstof_1_pm25).state > 100) {
                  it[0] = apply_offset(255, 25, 1);
                } else {
                  it[0] = apply_offset(0, 50, 255);  // Blauwe LED
                }
              } else {
                it[0] = Color(0, 0, 0);  // LED uit
              }
            } else {
              // Normale status zonder knipperen
              if (id(fijnstof_1_pm25).state > 140) {
                it[0] = apply_offset(164, 58, 218);
              } else if (id(fijnstof_1_pm25).state > 100) {
                it[0] = apply_offset(255, 25, 1);
              } else {
                it[0] = apply_offset(0, 50, 255);  // Blauwe LED
              }
            }



script:
  - id: start_led_effect
    then:
      - light.turn_on:
          id: ws2812_led
          brightness: 80%  # Helderheid op 100%
          effect: "PM2.5 Status Effect"  # Kies het PM2.5 Status Effect

text_sensor:
  - platform: template
    name: "- Wind Speed"
    id: text_wind_speed
    lambda: |-
      char buffer[20];
      sprintf(buffer, "%.1f m/s", id(wind_speed).state);
      return {buffer};

  - platform: template
    name: "- Fine Dust PM2.5"
    id: text_fine_dust
    lambda: |-
      char buffer[20];
      sprintf(buffer, "%.1f µg/m³", id(fijnstof_1_pm25).state);
      return {buffer};
